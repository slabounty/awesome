#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

  require_relative "lexer"
  require_relative "nodes"

class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 161)
  def parse(code, show_tokens=false)
    @tokens = Lexer.new.tokenize(code) # Tokenize the code using our lexer
    puts @tokens.inspect if show_tokens
    do_parse # Kickoff the parsing process
  end

  def next_token
    @tokens.shift
  end
...end grammar.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    31,    18,    29,    30,    27,    28,    18,    20,    21,    22,
    23,    24,    25,    26,    31,    18,    29,    30,    27,    28,
    18,    20,    21,    22,    23,    24,    25,    26,    34,    19,
    45,    46,    15,    34,    19,    45,    46,    43,    44,    39,
    40,    41,    42,    19,    51,    95,    15,    31,    19,    29,
    30,    27,    28,    18,    20,    21,    22,    23,    24,    25,
    26,    31,    92,    29,    30,    27,    28,    78,    20,    21,
    22,    23,    24,    25,    26,    34,    32,    45,    46,    15,
    74,    19,    86,    78,    85,    80,    50,    31,    49,    29,
    30,    27,    28,    15,    20,    21,    22,    23,    24,    25,
    26,    31,    97,    29,    30,    27,    28,    78,    20,    21,
    22,    23,    24,    25,    26,    94,    49,    93,    31,    15,
    29,    30,    27,    28,    34,    20,    21,    22,    23,    24,
    25,    26,    31,    15,    29,    30,    27,    28,    34,    20,
    21,    22,    23,    24,    25,    26,    78,    59,    57,    31,
    15,    29,    30,    27,    28,    53,    20,    21,    22,    23,
    24,    25,    26,    31,    15,    29,    30,    27,    28,    89,
    20,    21,    22,    23,    24,    25,    26,    52,   nil,   nil,
    31,    15,    29,    30,    27,    28,   nil,    20,    21,    22,
    23,    24,    25,    26,    31,    15,    29,    30,    27,    28,
   nil,    20,    21,    22,    23,    24,    25,    26,   nil,   nil,
   nil,    31,    15,    29,    30,    27,    28,   nil,    20,    21,
    22,    23,    24,    25,    26,    31,    15,    29,    30,    27,
    28,   nil,    20,    21,    22,    23,    24,    25,    26,   nil,
   nil,   nil,    31,    15,    29,    30,    27,    28,   nil,    20,
    21,    22,    23,    24,    25,    26,    31,    15,    29,    30,
    27,    28,   nil,    20,    21,    22,    23,    24,    25,    26,
   nil,   nil,   nil,    31,    15,    29,    30,    27,    28,   nil,
    20,    21,    22,    23,    24,    25,    26,    31,    15,    29,
    30,    27,    28,   nil,    20,    21,    22,    23,    24,    25,
    26,   nil,   nil,   nil,    31,    15,    29,    30,    27,    28,
   nil,    20,    21,    22,    23,    24,    25,    26,    31,    15,
    29,    30,    27,    28,   nil,    20,    21,    22,    23,    24,
    25,    26,   nil,   nil,   nil,    31,    15,    29,    30,    27,
    28,   nil,    20,    21,    22,    23,    24,    25,    26,    31,
    15,    29,    30,    27,    28,   nil,    20,    21,    22,    23,
    24,    25,    26,   nil,   nil,   nil,    31,    15,    29,    30,
    27,    28,   nil,    20,    21,    22,    23,    24,    25,    26,
    34,    15,    45,    46,    43,    44,    39,    40,    41,    42,
    37,    38,    36,    35,   nil,   nil,   nil,    72,    15,    78,
   nil,    34,   nil,    45,    46,    43,    44,    39,    40,    41,
    42,    37,    38,    36,    35,    78,   nil,    34,   nil,    45,
    46,    43,    44,    39,    40,    41,    42,    37,    38,    36,
    35,    34,   nil,    45,    46,    43,    44,    39,    40,    41,
    42,    37,    38,    36,    35,    34,   nil,    45,    46,    43,
    44,    39,    40,    41,    42,    37,    38,    36,    35,    34,
   nil,    45,    46,    43,    44,    39,    40,    41,    42,    37,
    38,    36,    35,    34,   nil,    45,    46,    43,    44,    39,
    40,    41,    42,    37,    38,    36,    35,    34,   nil,    45,
    46,    43,    44,    39,    40,    41,    42,    37,    38,    36,
    35,    34,   nil,    45,    46,    43,    44,    39,    40,    41,
    42,    37,    38,    36,    35,    34,   nil,    45,    46,    43,
    44,    39,    40,    41,    42,    37,    38,    36,    35,    34,
   nil,    45,    46,    43,    44,    39,    40,    41,    42,    37,
    38,    36,    34,   nil,    45,    46,    43,    44,    39,    40,
    41,    42,    37,    38,    34,   nil,    45,    46,    43,    44,
    39,    40,    41,    42,    34,   nil,    45,    46,    43,    44,
    34,   nil,    45,    46,    43,    44,    34,   nil,    45,    46,
    43,    44,    34,   nil,    45,    46,    43,    44 ]

racc_action_check = [
     0,     2,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    78,    83,    78,    78,    78,    78,
    78,    78,    78,    78,    78,    78,    78,    78,    69,     2,
    69,    69,     0,    62,     0,    62,    62,    62,    62,    62,
    62,    62,    62,    83,    26,    90,    78,    49,    78,    49,
    49,    49,    49,    87,    49,    49,    49,    49,    49,    49,
    49,    38,    87,    38,    38,    38,    38,    52,    38,    38,
    38,    38,    38,    38,    38,    68,     1,    68,    68,    49,
    49,    87,    75,    93,    75,    52,    25,    15,    25,    15,
    15,    15,    15,    38,    15,    15,    15,    15,    15,    15,
    15,    86,    94,    86,    86,    86,    86,    95,    86,    86,
    86,    86,    86,    86,    86,    88,    59,    88,    33,    15,
    33,    33,    33,    33,    70,    33,    33,    33,    33,    33,
    33,    33,    35,    86,    35,    35,    35,    35,    71,    35,
    35,    35,    35,    35,    35,    35,    53,    34,    32,    36,
    33,    36,    36,    36,    36,    28,    36,    36,    36,    36,
    36,    36,    36,    37,    35,    37,    37,    37,    37,    80,
    37,    37,    37,    37,    37,    37,    37,    27,   nil,   nil,
    39,    36,    39,    39,    39,    39,   nil,    39,    39,    39,
    39,    39,    39,    39,    40,    37,    40,    40,    40,    40,
   nil,    40,    40,    40,    40,    40,    40,    40,   nil,   nil,
   nil,    41,    39,    41,    41,    41,    41,   nil,    41,    41,
    41,    41,    41,    41,    41,    42,    40,    42,    42,    42,
    42,   nil,    42,    42,    42,    42,    42,    42,    42,   nil,
   nil,   nil,    43,    41,    43,    43,    43,    43,   nil,    43,
    43,    43,    43,    43,    43,    43,    44,    42,    44,    44,
    44,    44,   nil,    44,    44,    44,    44,    44,    44,    44,
   nil,   nil,   nil,    45,    43,    45,    45,    45,    45,   nil,
    45,    45,    45,    45,    45,    45,    45,    46,    44,    46,
    46,    46,    46,   nil,    46,    46,    46,    46,    46,    46,
    46,   nil,   nil,   nil,    50,    45,    50,    50,    50,    50,
   nil,    50,    50,    50,    50,    50,    50,    50,    51,    46,
    51,    51,    51,    51,   nil,    51,    51,    51,    51,    51,
    51,    51,   nil,   nil,   nil,    29,    50,    29,    29,    29,
    29,   nil,    29,    29,    29,    29,    29,    29,    29,    30,
    51,    30,    30,    30,    30,   nil,    30,    30,    30,    30,
    30,    30,    30,   nil,   nil,   nil,    31,    29,    31,    31,
    31,    31,   nil,    31,    31,    31,    31,    31,    31,    31,
    47,    30,    47,    47,    47,    47,    47,    47,    47,    47,
    47,    47,    47,    47,   nil,   nil,   nil,    47,    31,    56,
   nil,    56,   nil,    56,    56,    56,    56,    56,    56,    56,
    56,    56,    56,    56,    56,    54,   nil,    54,   nil,    54,
    54,    54,    54,    54,    54,    54,    54,    54,    54,    54,
    54,    58,   nil,    58,    58,    58,    58,    58,    58,    58,
    58,    58,    58,    58,    58,    76,   nil,    76,    76,    76,
    76,    76,    76,    76,    76,    76,    76,    76,    76,    73,
   nil,    73,    73,    73,    73,    73,    73,    73,    73,    73,
    73,    73,    73,    91,   nil,    91,    91,    91,    91,    91,
    91,    91,    91,    91,    91,    91,    91,    55,   nil,    55,
    55,    55,    55,    55,    55,    55,    55,    55,    55,    55,
    55,     3,   nil,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,    77,   nil,    77,    77,    77,
    77,    77,    77,    77,    77,    77,    77,    77,    77,    60,
   nil,    60,    60,    60,    60,    60,    60,    60,    60,    60,
    60,    60,    61,   nil,    61,    61,    61,    61,    61,    61,
    61,    61,    61,    61,    63,   nil,    63,    63,    63,    63,
    63,    63,    63,    63,    65,   nil,    65,    65,    65,    65,
    66,   nil,    66,    66,    66,    66,    67,   nil,    67,    67,
    67,    67,    64,   nil,    64,    64,    64,    64 ]

racc_action_pointer = [
    -2,    76,    -7,   483,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    85,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    54,    12,   163,   140,   333,
   347,   364,   148,   116,   133,   130,   147,   161,    59,   178,
   192,   209,   223,   240,   254,   271,   285,   362,   nil,    45,
   302,   316,    51,   130,   399,   469,   383,   nil,   413,    82,
   511,   524,    15,   536,   564,   546,   552,   558,    57,    10,
   106,   120,   nil,   441,   nil,    49,   427,   497,    12,   nil,
   155,   nil,   nil,     7,   nil,   nil,    99,    45,    82,   nil,
    42,   455,   nil,    67,    88,    91,   nil,   nil,   nil ]

racc_action_default = [
    -1,   -61,    -2,    -3,    -6,    -7,    -8,    -9,   -10,   -11,
   -12,   -13,   -14,   -15,   -16,   -61,   -18,   -19,   -20,   -21,
   -22,   -23,   -24,   -25,   -26,   -48,   -46,   -61,   -61,   -61,
   -61,   -61,   -61,    -5,   -61,   -61,   -61,   -61,   -61,   -61,
   -61,   -61,   -61,   -61,   -61,   -61,   -61,   -61,   -27,   -61,
   -61,   -61,   -61,   -61,   -61,   -58,   -61,    99,    -4,   -29,
   -34,   -35,   -36,   -37,   -38,   -39,   -40,   -41,   -42,   -43,
   -44,   -45,   -17,   -32,   -30,   -61,   -49,   -47,   -61,   -51,
   -53,   -56,   -57,   -59,   -28,   -31,   -61,   -61,   -61,   -54,
   -61,   -33,   -50,   -61,   -61,   -61,   -52,   -55,   -60 ]

racc_goto_table = [
    33,     2,    47,    79,    81,    82,    48,    83,    88,    75,
     1,   nil,   nil,   nil,   nil,   nil,    54,    55,    56,   nil,
    58,   nil,    60,    61,    62,    63,    64,    65,    66,    67,
    68,    69,    70,    71,   nil,   nil,    73,    76,    77,   nil,
    84,   nil,   nil,   nil,    96,   nil,    98,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    91,   nil,   nil,   nil,   nil,   nil,    87,
   nil,    90,   nil,   nil,   nil,    33 ]

racc_goto_check = [
     4,     2,     3,    19,    19,    19,    17,    19,    20,    18,
     1,   nil,   nil,   nil,   nil,   nil,     3,     3,     3,   nil,
     3,   nil,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,   nil,   nil,     3,     3,     3,   nil,
    17,   nil,   nil,   nil,    19,   nil,    19,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     3,   nil,   nil,   nil,   nil,   nil,     2,
   nil,     4,   nil,   nil,   nil,     4 ]

racc_goto_pointer = [
   nil,    10,     1,   -13,    -2,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   -19,   -40,   -49,
   -72 ]

racc_goto_default = [
   nil,   nil,   nil,     3,     4,     5,     6,     7,     8,     9,
    10,    11,    12,    13,    14,    16,    17,   nil,   nil,   nil,
   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 38, :_reduce_1,
  1, 38, :_reduce_2,
  1, 39, :_reduce_3,
  3, 39, :_reduce_4,
  2, 39, :_reduce_5,
  1, 39, :_reduce_6,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  3, 40, :_reduce_17,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  1, 41, :_reduce_none,
  1, 41, :_reduce_none,
  1, 42, :_reduce_22,
  1, 42, :_reduce_23,
  1, 42, :_reduce_24,
  1, 42, :_reduce_25,
  1, 42, :_reduce_26,
  2, 43, :_reduce_27,
  4, 43, :_reduce_28,
  3, 43, :_reduce_29,
  2, 54, :_reduce_30,
  3, 54, :_reduce_31,
  1, 55, :_reduce_32,
  3, 55, :_reduce_33,
  3, 44, :_reduce_34,
  3, 44, :_reduce_35,
  3, 44, :_reduce_36,
  3, 44, :_reduce_37,
  3, 44, :_reduce_38,
  3, 44, :_reduce_39,
  3, 44, :_reduce_40,
  3, 44, :_reduce_41,
  3, 44, :_reduce_42,
  3, 44, :_reduce_43,
  3, 44, :_reduce_44,
  3, 44, :_reduce_45,
  1, 45, :_reduce_46,
  3, 46, :_reduce_47,
  1, 47, :_reduce_48,
  3, 48, :_reduce_49,
  3, 56, :_reduce_50,
  3, 49, :_reduce_51,
  6, 49, :_reduce_52,
  0, 57, :_reduce_53,
  1, 57, :_reduce_54,
  3, 57, :_reduce_55,
  3, 50, :_reduce_56,
  3, 52, :_reduce_57,
  2, 53, :_reduce_58,
  3, 51, :_reduce_59,
  6, 51, :_reduce_60 ]

racc_reduce_n = 61

racc_shift_n = 99

racc_token_table = {
  false => 0,
  :error => 1,
  :IF => 2,
  :ELSE => 3,
  :WHILE => 4,
  :RETURN => 5,
  :DEF => 6,
  :CLASS => 7,
  :NEWLINE => 8,
  :NUMBER => 9,
  :STRING => 10,
  :TRUE => 11,
  :FALSE => 12,
  :NIL => 13,
  :IDENTIFIER => 14,
  :CONSTANT => 15,
  :INDENT => 16,
  :DEDENT => 17,
  "." => 18,
  "!" => 19,
  "*" => 20,
  "/" => 21,
  "+" => 22,
  "-" => 23,
  ">" => 24,
  ">=" => 25,
  "<" => 26,
  "<=" => 27,
  "==" => 28,
  "!=" => 29,
  "&&" => 30,
  "||" => 31,
  "=" => 32,
  "," => 33,
  "(" => 34,
  ")" => 35,
  ";" => 36 }

racc_nt_base = 37

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IF",
  "ELSE",
  "WHILE",
  "RETURN",
  "DEF",
  "CLASS",
  "NEWLINE",
  "NUMBER",
  "STRING",
  "TRUE",
  "FALSE",
  "NIL",
  "IDENTIFIER",
  "CONSTANT",
  "INDENT",
  "DEDENT",
  "\".\"",
  "\"!\"",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "\">\"",
  "\">=\"",
  "\"<\"",
  "\"<=\"",
  "\"==\"",
  "\"!=\"",
  "\"&&\"",
  "\"||\"",
  "\"=\"",
  "\",\"",
  "\"(\"",
  "\")\"",
  "\";\"",
  "$start",
  "Program",
  "Expressions",
  "Expression",
  "Terminator",
  "Literal",
  "Call",
  "Operator",
  "GetConstant",
  "SetConstant",
  "GetLocal",
  "SetLocal",
  "Def",
  "Class",
  "If",
  "While",
  "Return",
  "Arguments",
  "ArgList",
  "Block",
  "ParamList" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 32)
  def _reduce_1(val, _values, result)
     result = Nodes.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 33)
  def _reduce_2(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 37)
  def _reduce_3(val, _values, result)
     result = Nodes.new(val) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 38)
  def _reduce_4(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 39)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 40)
  def _reduce_6(val, _values, result)
     result = Nodes.new([]) 
    result
  end
.,.,

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

module_eval(<<'.,.,', 'grammar.y', 54)
  def _reduce_17(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

module_eval(<<'.,.,', 'grammar.y', 65)
  def _reduce_22(val, _values, result)
     result = NumberNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 66)
  def _reduce_23(val, _values, result)
     result = StringNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 67)
  def _reduce_24(val, _values, result)
     result = TrueNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 68)
  def _reduce_25(val, _values, result)
     result = FalseNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 69)
  def _reduce_26(val, _values, result)
     result = NilNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 73)
  def _reduce_27(val, _values, result)
     result = CallNode.new(nil, val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 75)
  def _reduce_28(val, _values, result)
     result = CallNode.new(val[0], val[2], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 76)
  def _reduce_29(val, _values, result)
     result = CallNode.new(val[0], val[2], []) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 80)
  def _reduce_30(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 81)
  def _reduce_31(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 85)
  def _reduce_32(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 86)
  def _reduce_33(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 90)
  def _reduce_34(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 91)
  def _reduce_35(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 92)
  def _reduce_36(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 93)
  def _reduce_37(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 94)
  def _reduce_38(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 95)
  def _reduce_39(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 96)
  def _reduce_40(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 97)
  def _reduce_41(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 98)
  def _reduce_42(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 99)
  def _reduce_43(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 100)
  def _reduce_44(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 101)
  def _reduce_45(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 105)
  def _reduce_46(val, _values, result)
     result = GetConstantNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 109)
  def _reduce_47(val, _values, result)
     result = SetConstantNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 113)
  def _reduce_48(val, _values, result)
     result = GetLocalNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 117)
  def _reduce_49(val, _values, result)
     result = SetLocalNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 121)
  def _reduce_50(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 125)
  def _reduce_51(val, _values, result)
     result = DefNode.new(val[1], [], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 127)
  def _reduce_52(val, _values, result)
     result = DefNode.new(val[1], val[3], val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 131)
  def _reduce_53(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 132)
  def _reduce_54(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 133)
  def _reduce_55(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 137)
  def _reduce_56(val, _values, result)
     result = ClassNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 141)
  def _reduce_57(val, _values, result)
     result = WhileNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 145)
  def _reduce_58(val, _values, result)
     result = ReturnNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 149)
  def _reduce_59(val, _values, result)
     result = IfNode.new(val[1], val[2], []) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 150)
  def _reduce_60(val, _values, result)
     result = IfNode.new(val[1], val[2], val[5]) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser
