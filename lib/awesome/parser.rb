#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

  require_relative "lexer"
  require_relative "nodes"

class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 148)
  def parse(code, show_tokens=false)
    @tokens = Lexer.new.tokenize(code) # Tokenize the code using our lexer
    puts @tokens.inspect if show_tokens
    do_parse # Kickoff the parsing process
  end

  def next_token
    @tokens.shift
  end
...end grammar.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    27,    16,    25,    26,    16,    18,    19,    20,    21,    22,
    23,    24,    27,    16,    25,    26,    16,    18,    19,    20,
    21,    22,    23,    24,    30,    51,    41,    42,    16,    17,
    15,    30,    17,    41,    42,    39,    40,    85,    87,    45,
    86,    17,    15,    27,    17,    25,    26,    72,    18,    19,
    20,    21,    22,    23,    24,    27,    17,    25,    26,    72,
    18,    19,    20,    21,    22,    23,    24,    30,    30,    41,
    42,    39,    40,    15,    68,    30,    30,    74,    41,    42,
    46,    27,    45,    25,    26,    15,    18,    19,    20,    21,
    22,    23,    24,    27,    49,    25,    26,    72,    18,    19,
    20,    21,    22,    23,    24,    90,    79,    27,    78,    25,
    26,    15,    18,    19,    20,    21,    22,    23,    24,    27,
    48,    25,    26,    15,    18,    19,    20,    21,    22,    23,
    24,    82,    47,    27,    28,    25,    26,    15,    18,    19,
    20,    21,    22,    23,    24,    27,    88,    25,    26,    15,
    18,    19,    20,    21,    22,    23,    24,    53,    72,    27,
   nil,    25,    26,    15,    18,    19,    20,    21,    22,    23,
    24,    27,   nil,    25,    26,    15,    18,    19,    20,    21,
    22,    23,    24,   nil,   nil,    27,   nil,    25,    26,    15,
    18,    19,    20,    21,    22,    23,    24,    27,   nil,    25,
    26,    15,    18,    19,    20,    21,    22,    23,    24,   nil,
   nil,    27,   nil,    25,    26,    15,    18,    19,    20,    21,
    22,    23,    24,    27,   nil,    25,    26,    15,    18,    19,
    20,    21,    22,    23,    24,   nil,   nil,    27,   nil,    25,
    26,    15,    18,    19,    20,    21,    22,    23,    24,    27,
   nil,    25,    26,    15,    18,    19,    20,    21,    22,    23,
    24,   nil,   nil,    27,   nil,    25,    26,    15,    18,    19,
    20,    21,    22,    23,    24,    27,   nil,    25,    26,    15,
    18,    19,    20,    21,    22,    23,    24,   nil,   nil,    27,
   nil,    25,    26,    15,    18,    19,    20,    21,    22,    23,
    24,   nil,   nil,   nil,    30,    15,    41,    42,    39,    40,
    35,    36,    37,    38,    33,    34,    32,    31,    72,    15,
    30,    66,    41,    42,    39,    40,    35,    36,    37,    38,
    33,    34,    32,    31,    30,   nil,    41,    42,    39,    40,
    35,    36,    37,    38,    33,    34,    32,    31,    30,   nil,
    41,    42,    39,    40,    35,    36,    37,    38,    33,    34,
    32,    31,    30,   nil,    41,    42,    39,    40,    35,    36,
    37,    38,    33,    34,    32,    31,    30,   nil,    41,    42,
    39,    40,    35,    36,    37,    38,    33,    34,    32,    31,
    30,   nil,    41,    42,    39,    40,    35,    36,    37,    38,
    33,    34,    32,    31,    30,   nil,    41,    42,    39,    40,
    35,    36,    37,    38,    33,    34,    32,    31,    30,   nil,
    41,    42,    39,    40,    35,    36,    37,    38,    33,    34,
    32,    30,   nil,    41,    42,    39,    40,    35,    36,    37,
    38,    33,    34,    30,   nil,    41,    42,    39,    40,    35,
    36,    37,    38,    30,   nil,    41,    42,    39,    40,    35,
    36,    37,    38,    30,   nil,    41,    42,    39,    40,    30,
   nil,    41,    42,    39,    40 ]

racc_action_check = [
     0,    76,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    72,     2,    72,    72,    72,    72,    72,    72,
    72,    72,    72,    72,    62,    28,    62,    62,    80,    76,
     0,    61,     0,    61,    61,    61,    61,    80,    81,    53,
    81,     2,    72,    45,    72,    45,    45,    88,    45,    45,
    45,    45,    45,    45,    45,    79,    80,    79,    79,    48,
    79,    79,    79,    79,    79,    79,    79,    59,    64,    59,
    59,    59,    59,    45,    45,    65,    63,    48,    63,    63,
    23,    31,    23,    31,    31,    79,    31,    31,    31,    31,
    31,    31,    31,    47,    26,    47,    47,    86,    47,    47,
    47,    47,    47,    47,    47,    87,    69,    15,    69,    15,
    15,    31,    15,    15,    15,    15,    15,    15,    15,    37,
    25,    37,    37,    47,    37,    37,    37,    37,    37,    37,
    37,    74,    24,    38,     1,    38,    38,    15,    38,    38,
    38,    38,    38,    38,    38,    39,    83,    39,    39,    37,
    39,    39,    39,    39,    39,    39,    39,    30,    49,    40,
   nil,    40,    40,    38,    40,    40,    40,    40,    40,    40,
    40,    41,   nil,    41,    41,    39,    41,    41,    41,    41,
    41,    41,    41,   nil,   nil,    42,   nil,    42,    42,    40,
    42,    42,    42,    42,    42,    42,    42,    27,   nil,    27,
    27,    41,    27,    27,    27,    27,    27,    27,    27,   nil,
   nil,    29,   nil,    29,    29,    42,    29,    29,    29,    29,
    29,    29,    29,    46,   nil,    46,    46,    27,    46,    46,
    46,    46,    46,    46,    46,   nil,   nil,    32,   nil,    32,
    32,    29,    32,    32,    32,    32,    32,    32,    32,    33,
   nil,    33,    33,    46,    33,    33,    33,    33,    33,    33,
    33,   nil,   nil,    34,   nil,    34,    34,    32,    34,    34,
    34,    34,    34,    34,    34,    35,   nil,    35,    35,    33,
    35,    35,    35,    35,    35,    35,    35,   nil,   nil,    36,
   nil,    36,    36,    34,    36,    36,    36,    36,    36,    36,
    36,   nil,   nil,   nil,    43,    35,    43,    43,    43,    43,
    43,    43,    43,    43,    43,    43,    43,    43,    50,    36,
    50,    43,    50,    50,    50,    50,    50,    50,    50,    50,
    50,    50,    50,    50,    67,   nil,    67,    67,    67,    67,
    67,    67,    67,    67,    67,    67,    67,    67,     3,   nil,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,    52,   nil,    52,    52,    52,    52,    52,    52,
    52,    52,    52,    52,    52,    52,    70,   nil,    70,    70,
    70,    70,    70,    70,    70,    70,    70,    70,    70,    70,
    71,   nil,    71,    71,    71,    71,    71,    71,    71,    71,
    71,    71,    71,    71,    84,   nil,    84,    84,    84,    84,
    84,    84,    84,    84,    84,    84,    84,    84,    54,   nil,
    54,    54,    54,    54,    54,    54,    54,    54,    54,    54,
    54,    55,   nil,    55,    55,    55,    55,    55,    55,    55,
    55,    55,    55,    56,   nil,    56,    56,    56,    56,    56,
    56,    56,    56,    57,   nil,    57,    57,    57,    57,    57,
    57,    57,    57,    60,   nil,    60,    60,    60,    60,    58,
   nil,    58,    58,    58,    58 ]

racc_action_pointer = [
    -2,   134,     7,   332,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   105,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    50,   102,   108,    81,   195,    25,   209,
   145,    79,   235,   247,   261,   273,   287,   117,   131,   143,
   157,   169,   183,   288,   nil,    41,   221,    91,    45,   144,
   304,   nil,   346,     7,   402,   415,   427,   437,   453,    51,
   447,    15,     8,    60,    52,    59,   nil,   318,   nil,    75,
   360,   374,    10,   nil,   119,   nil,    -5,   nil,   nil,    53,
    22,     7,   nil,   143,   388,   nil,    83,    93,    33,   nil,
   nil,   nil ]

racc_action_default = [
    -1,   -57,    -2,    -3,    -6,    -7,    -8,    -9,   -10,   -11,
   -12,   -13,   -14,   -15,   -16,   -57,   -18,   -19,   -20,   -21,
   -22,   -23,   -24,   -46,   -44,   -57,   -57,   -57,   -57,    -5,
   -57,   -57,   -57,   -57,   -57,   -57,   -57,   -57,   -57,   -57,
   -57,   -57,   -57,   -57,   -25,   -57,   -57,   -57,   -57,   -57,
   -57,    92,    -4,   -27,   -32,   -33,   -34,   -35,   -36,   -37,
   -38,   -39,   -40,   -41,   -42,   -43,   -17,   -30,   -28,   -57,
   -47,   -45,   -57,   -49,   -51,   -54,   -55,   -26,   -29,   -57,
   -57,   -57,   -52,   -57,   -31,   -48,   -57,   -57,   -57,   -50,
   -53,   -56 ]

racc_goto_table = [
    29,     2,    43,    73,    75,    76,    44,    81,    69,     1,
   nil,   nil,   nil,   nil,    50,   nil,    52,   nil,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
   nil,   nil,    67,    70,    71,   nil,    77,   nil,   nil,   nil,
   nil,    89,   nil,    91,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    84,   nil,   nil,   nil,
   nil,   nil,   nil,    80,    83,   nil,   nil,   nil,    29 ]

racc_goto_check = [
     4,     2,     3,    17,    17,    17,    15,    18,    16,     1,
   nil,   nil,   nil,   nil,     3,   nil,     3,   nil,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
   nil,   nil,     3,     3,     3,   nil,    15,   nil,   nil,   nil,
   nil,    17,   nil,    17,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     3,   nil,   nil,   nil,
   nil,   nil,   nil,     2,     4,   nil,   nil,   nil,     4 ]

racc_goto_pointer = [
   nil,     9,     1,   -13,    -2,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   -17,   -37,   -45,   -67 ]

racc_goto_default = [
   nil,   nil,   nil,     3,     4,     5,     6,     7,     8,     9,
    10,    11,    12,    13,    14,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 36, :_reduce_1,
  1, 36, :_reduce_2,
  1, 37, :_reduce_3,
  3, 37, :_reduce_4,
  2, 37, :_reduce_5,
  1, 37, :_reduce_6,
  1, 38, :_reduce_none,
  1, 38, :_reduce_none,
  1, 38, :_reduce_none,
  1, 38, :_reduce_none,
  1, 38, :_reduce_none,
  1, 38, :_reduce_none,
  1, 38, :_reduce_none,
  1, 38, :_reduce_none,
  1, 38, :_reduce_none,
  1, 38, :_reduce_none,
  3, 38, :_reduce_17,
  1, 39, :_reduce_none,
  1, 39, :_reduce_none,
  1, 40, :_reduce_20,
  1, 40, :_reduce_21,
  1, 40, :_reduce_22,
  1, 40, :_reduce_23,
  1, 40, :_reduce_24,
  2, 41, :_reduce_25,
  4, 41, :_reduce_26,
  3, 41, :_reduce_27,
  2, 50, :_reduce_28,
  3, 50, :_reduce_29,
  1, 51, :_reduce_30,
  3, 51, :_reduce_31,
  3, 42, :_reduce_32,
  3, 42, :_reduce_33,
  3, 42, :_reduce_34,
  3, 42, :_reduce_35,
  3, 42, :_reduce_36,
  3, 42, :_reduce_37,
  3, 42, :_reduce_38,
  3, 42, :_reduce_39,
  3, 42, :_reduce_40,
  3, 42, :_reduce_41,
  3, 42, :_reduce_42,
  3, 42, :_reduce_43,
  1, 43, :_reduce_44,
  3, 44, :_reduce_45,
  1, 45, :_reduce_46,
  3, 46, :_reduce_47,
  3, 52, :_reduce_48,
  3, 47, :_reduce_49,
  6, 47, :_reduce_50,
  0, 53, :_reduce_51,
  1, 53, :_reduce_52,
  3, 53, :_reduce_53,
  3, 48, :_reduce_54,
  3, 49, :_reduce_55,
  6, 49, :_reduce_56 ]

racc_reduce_n = 57

racc_shift_n = 92

racc_token_table = {
  false => 0,
  :error => 1,
  :IF => 2,
  :ELSE => 3,
  :DEF => 4,
  :CLASS => 5,
  :NEWLINE => 6,
  :NUMBER => 7,
  :STRING => 8,
  :TRUE => 9,
  :FALSE => 10,
  :NIL => 11,
  :IDENTIFIER => 12,
  :CONSTANT => 13,
  :INDENT => 14,
  :DEDENT => 15,
  "." => 16,
  "!" => 17,
  "*" => 18,
  "/" => 19,
  "+" => 20,
  "-" => 21,
  ">" => 22,
  ">=" => 23,
  "<" => 24,
  "<=" => 25,
  "==" => 26,
  "!=" => 27,
  "&&" => 28,
  "||" => 29,
  "=" => 30,
  "," => 31,
  "(" => 32,
  ")" => 33,
  ";" => 34 }

racc_nt_base = 35

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IF",
  "ELSE",
  "DEF",
  "CLASS",
  "NEWLINE",
  "NUMBER",
  "STRING",
  "TRUE",
  "FALSE",
  "NIL",
  "IDENTIFIER",
  "CONSTANT",
  "INDENT",
  "DEDENT",
  "\".\"",
  "\"!\"",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "\">\"",
  "\">=\"",
  "\"<\"",
  "\"<=\"",
  "\"==\"",
  "\"!=\"",
  "\"&&\"",
  "\"||\"",
  "\"=\"",
  "\",\"",
  "\"(\"",
  "\")\"",
  "\";\"",
  "$start",
  "Program",
  "Expressions",
  "Expression",
  "Terminator",
  "Literal",
  "Call",
  "Operator",
  "GetConstant",
  "SetConstant",
  "GetLocal",
  "SetLocal",
  "Def",
  "Class",
  "If",
  "Arguments",
  "ArgList",
  "Block",
  "ParamList" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 30)
  def _reduce_1(val, _values, result)
     result = Nodes.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 31)
  def _reduce_2(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 35)
  def _reduce_3(val, _values, result)
     result = Nodes.new(val) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 36)
  def _reduce_4(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 37)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 38)
  def _reduce_6(val, _values, result)
     result = Nodes.new([]) 
    result
  end
.,.,

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

module_eval(<<'.,.,', 'grammar.y', 52)
  def _reduce_17(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 18 omitted

# reduce 19 omitted

module_eval(<<'.,.,', 'grammar.y', 61)
  def _reduce_20(val, _values, result)
     result = NumberNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 62)
  def _reduce_21(val, _values, result)
     result = StringNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 63)
  def _reduce_22(val, _values, result)
     result = TrueNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 64)
  def _reduce_23(val, _values, result)
     result = FalseNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 65)
  def _reduce_24(val, _values, result)
     result = NilNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 69)
  def _reduce_25(val, _values, result)
     result = CallNode.new(nil, val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 71)
  def _reduce_26(val, _values, result)
     result = CallNode.new(val[0], val[2], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 72)
  def _reduce_27(val, _values, result)
     result = CallNode.new(val[0], val[2], []) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 76)
  def _reduce_28(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 77)
  def _reduce_29(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 81)
  def _reduce_30(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 82)
  def _reduce_31(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 86)
  def _reduce_32(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 87)
  def _reduce_33(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 88)
  def _reduce_34(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 89)
  def _reduce_35(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 90)
  def _reduce_36(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 91)
  def _reduce_37(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 92)
  def _reduce_38(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 93)
  def _reduce_39(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 94)
  def _reduce_40(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 95)
  def _reduce_41(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 96)
  def _reduce_42(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 97)
  def _reduce_43(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 101)
  def _reduce_44(val, _values, result)
     result = GetConstantNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 105)
  def _reduce_45(val, _values, result)
     result = SetConstantNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 109)
  def _reduce_46(val, _values, result)
     result = GetLocalNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 113)
  def _reduce_47(val, _values, result)
     result = SetLocalNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 117)
  def _reduce_48(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 121)
  def _reduce_49(val, _values, result)
     result = DefNode.new(val[1], [], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 123)
  def _reduce_50(val, _values, result)
     result = DefNode.new(val[1], val[3], val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 127)
  def _reduce_51(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 128)
  def _reduce_52(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 129)
  def _reduce_53(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 133)
  def _reduce_54(val, _values, result)
     result = ClassNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 137)
  def _reduce_55(val, _values, result)
     result = IfNode.new(val[1], val[2], []) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 138)
  def _reduce_56(val, _values, result)
     result = IfNode.new(val[1], val[2], val[5]) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser
