#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

  require_relative "lexer"
  require_relative "nodes"

class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 155)
  def parse(code, show_tokens=false)
    @tokens = Lexer.new.tokenize(code) # Tokenize the code using our lexer
    puts @tokens.inspect if show_tokens
    do_parse # Kickoff the parsing process
  end

  def next_token
    @tokens.shift
  end
...end grammar.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    29,    17,    28,    26,    27,    17,    19,    20,    21,    22,
    23,    24,    25,    29,    17,    28,    26,    27,    17,    19,
    20,    21,    22,    23,    24,    25,    91,    54,    90,    18,
    47,    15,    32,    18,    43,    44,    41,    42,    37,    38,
    39,    40,    18,    75,    15,    29,    18,    28,    26,    27,
    17,    19,    20,    21,    22,    23,    24,    25,    29,    89,
    28,    26,    27,    75,    19,    20,    21,    22,    23,    24,
    25,    32,    32,    43,    44,    32,    15,    71,    18,    51,
    32,    77,    43,    44,    29,    75,    28,    26,    27,    15,
    19,    20,    21,    22,    23,    24,    25,    29,    94,    28,
    26,    27,    50,    19,    20,    21,    22,    23,    24,    25,
    29,    86,    28,    26,    27,    15,    19,    20,    21,    22,
    23,    24,    25,    29,    49,    28,    26,    27,    15,    19,
    20,    21,    22,    23,    24,    25,    29,    30,    28,    26,
    27,    15,    19,    20,    21,    22,    23,    24,    25,    29,
    92,    28,    26,    27,    15,    19,    20,    21,    22,    23,
    24,    25,    29,    75,    28,    26,    27,    15,    19,    20,
    21,    22,    23,    24,    25,    29,    56,    28,    26,    27,
    15,    19,    20,    21,    22,    23,    24,    25,    29,   nil,
    28,    26,    27,    15,    19,    20,    21,    22,    23,    24,
    25,    29,   nil,    28,    26,    27,    15,    19,    20,    21,
    22,    23,    24,    25,    29,   nil,    28,    26,    27,    15,
    19,    20,    21,    22,    23,    24,    25,    29,   nil,    28,
    26,    27,    15,    19,    20,    21,    22,    23,    24,    25,
    29,   nil,    28,    26,    27,    15,    19,    20,    21,    22,
    23,    24,    25,    29,   nil,    28,    26,    27,    15,    19,
    20,    21,    22,    23,    24,    25,    29,   nil,    28,    26,
    27,    15,    19,    20,    21,    22,    23,    24,    25,    29,
   nil,    28,    26,    27,    15,    19,    20,    21,    22,    23,
    24,    25,    29,   nil,    28,    26,    27,    15,    19,    20,
    21,    22,    23,    24,    25,    29,   nil,    28,    26,    27,
    15,    19,    20,    21,    22,    23,    24,    25,    48,    83,
    47,    82,    32,    15,    43,    44,    41,    42,    37,    38,
    39,    40,    35,    36,    34,    33,    15,   nil,    75,    69,
    32,   nil,    43,    44,    41,    42,    37,    38,    39,    40,
    35,    36,    34,    33,    75,   nil,    32,   nil,    43,    44,
    41,    42,    37,    38,    39,    40,    35,    36,    34,    33,
    32,   nil,    43,    44,    41,    42,    37,    38,    39,    40,
    35,    36,    34,    33,    32,   nil,    43,    44,    41,    42,
    37,    38,    39,    40,    35,    36,    34,    33,    32,   nil,
    43,    44,    41,    42,    37,    38,    39,    40,    35,    36,
    34,    33,    32,   nil,    43,    44,    41,    42,    37,    38,
    39,    40,    35,    36,    34,    33,    32,   nil,    43,    44,
    41,    42,    37,    38,    39,    40,    35,    36,    34,    33,
    32,   nil,    43,    44,    41,    42,    37,    38,    39,    40,
    35,    36,    34,    33,    32,   nil,    43,    44,    41,    42,
    37,    38,    39,    40,    35,    36,    34,    32,   nil,    43,
    44,    41,    42,    37,    38,    39,    40,    35,    36,    32,
   nil,    43,    44,    41,    42,    37,    38,    39,    40,    32,
   nil,    43,    44,    41,    42,    32,   nil,    43,    44,    41,
    42,    32,   nil,    43,    44,    41,    42,    32,   nil,    43,
    44,    41,    42 ]

racc_action_check = [
    75,     2,    75,    75,    75,    75,    75,    75,    75,    75,
    75,    75,    75,     0,    80,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    85,    30,    85,     2,
    56,    75,    59,    75,    59,    59,    59,    59,    59,    59,
    59,    59,    80,    92,     0,    47,     0,    47,    47,    47,
    84,    47,    47,    47,    47,    47,    47,    47,    48,    84,
    48,    48,    48,    50,    48,    48,    48,    48,    48,    48,
    48,    65,    67,    65,    65,    68,    47,    47,    84,    27,
    66,    50,    66,    66,    15,    90,    15,    15,    15,    48,
    15,    15,    15,    15,    15,    15,    15,    83,    91,    83,
    83,    83,    26,    83,    83,    83,    83,    83,    83,    83,
    39,    77,    39,    39,    39,    15,    39,    39,    39,    39,
    39,    39,    39,    40,    25,    40,    40,    40,    83,    40,
    40,    40,    40,    40,    40,    40,    41,     1,    41,    41,
    41,    39,    41,    41,    41,    41,    41,    41,    41,    42,
    87,    42,    42,    42,    40,    42,    42,    42,    42,    42,
    42,    42,    43,    51,    43,    43,    43,    41,    43,    43,
    43,    43,    43,    43,    43,    44,    32,    44,    44,    44,
    42,    44,    44,    44,    44,    44,    44,    44,    49,   nil,
    49,    49,    49,    43,    49,    49,    49,    49,    49,    49,
    49,    28,   nil,    28,    28,    28,    44,    28,    28,    28,
    28,    28,    28,    28,    29,   nil,    29,    29,    29,    49,
    29,    29,    29,    29,    29,    29,    29,    31,   nil,    31,
    31,    31,    28,    31,    31,    31,    31,    31,    31,    31,
    33,   nil,    33,    33,    33,    29,    33,    33,    33,    33,
    33,    33,    33,    34,   nil,    34,    34,    34,    31,    34,
    34,    34,    34,    34,    34,    34,    35,   nil,    35,    35,
    35,    33,    35,    35,    35,    35,    35,    35,    35,    36,
   nil,    36,    36,    36,    34,    36,    36,    36,    36,    36,
    36,    36,    37,   nil,    37,    37,    37,    35,    37,    37,
    37,    37,    37,    37,    37,    38,   nil,    38,    38,    38,
    36,    38,    38,    38,    38,    38,    38,    38,    24,    72,
    24,    72,    45,    37,    45,    45,    45,    45,    45,    45,
    45,    45,    45,    45,    45,    45,    38,   nil,    52,    45,
    52,   nil,    52,    52,    52,    52,    52,    52,    52,    52,
    52,    52,    52,    52,    53,   nil,    53,   nil,    53,    53,
    53,    53,    53,    53,    53,    53,    53,    53,    53,    53,
    70,   nil,    70,    70,    70,    70,    70,    70,    70,    70,
    70,    70,    70,    70,     3,   nil,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,    55,   nil,
    55,    55,    55,    55,    55,    55,    55,    55,    55,    55,
    55,    55,    73,   nil,    73,    73,    73,    73,    73,    73,
    73,    73,    73,    73,    73,    73,    74,   nil,    74,    74,
    74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
    88,   nil,    88,    88,    88,    88,    88,    88,    88,    88,
    88,    88,    88,    88,    57,   nil,    57,    57,    57,    57,
    57,    57,    57,    57,    57,    57,    57,    58,   nil,    58,
    58,    58,    58,    58,    58,    58,    58,    58,    58,    60,
   nil,    60,    60,    60,    60,    60,    60,    60,    60,    64,
   nil,    64,    64,    64,    64,    62,   nil,    62,    62,    62,
    62,    63,   nil,    63,    63,    63,    63,    61,   nil,    61,
    61,    61,    61 ]

racc_action_pointer = [
    11,   137,    -6,   367,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    82,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   287,    93,    89,    65,   199,   212,
    27,   225,   163,   238,   251,   264,   277,   290,   303,   108,
   121,   134,   147,   160,   173,   305,   nil,    43,    56,   186,
    48,   148,   323,   339,   nil,   381,    -3,   437,   450,    15,
   462,   490,   478,   484,   472,    54,    63,    55,    58,   nil,
   353,   nil,   287,   395,   409,    -2,   nil,    98,   nil,   nil,
     7,   nil,   nil,    95,    43,    -6,   nil,   147,   423,   nil,
    70,    85,    28,   nil,   nil,   nil ]

racc_action_default = [
    -1,   -59,    -2,    -3,    -6,    -7,    -8,    -9,   -10,   -11,
   -12,   -13,   -14,   -15,   -16,   -59,   -18,   -19,   -20,   -21,
   -22,   -23,   -24,   -25,   -47,   -45,   -59,   -59,   -59,   -59,
   -59,    -5,   -59,   -59,   -59,   -59,   -59,   -59,   -59,   -59,
   -59,   -59,   -59,   -59,   -59,   -59,   -26,   -59,   -59,   -59,
   -59,   -59,   -59,   -59,    96,    -4,   -28,   -33,   -34,   -35,
   -36,   -37,   -38,   -39,   -40,   -41,   -42,   -43,   -44,   -17,
   -31,   -29,   -59,   -48,   -46,   -59,   -50,   -52,   -55,   -56,
   -57,   -27,   -30,   -59,   -59,   -59,   -53,   -59,   -32,   -49,
   -59,   -59,   -59,   -51,   -54,   -58 ]

racc_goto_table = [
    31,     2,    45,    76,    78,    79,    80,    46,    85,    72,
     1,   nil,   nil,   nil,   nil,    52,    53,   nil,    55,   nil,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,   nil,   nil,    70,    73,    74,   nil,   nil,    81,
   nil,   nil,   nil,    93,   nil,    95,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    88,   nil,   nil,   nil,   nil,   nil,    84,   nil,    87,   nil,
   nil,   nil,    31 ]

racc_goto_check = [
     4,     2,     3,    18,    18,    18,    18,    16,    19,    17,
     1,   nil,   nil,   nil,   nil,     3,     3,   nil,     3,   nil,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,   nil,   nil,     3,     3,     3,   nil,   nil,    16,
   nil,   nil,   nil,    18,   nil,    18,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     3,   nil,   nil,   nil,   nil,   nil,     2,   nil,     4,   nil,
   nil,   nil,     4 ]

racc_goto_pointer = [
   nil,    10,     1,   -13,    -2,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   -17,   -38,   -47,   -69 ]

racc_goto_default = [
   nil,   nil,   nil,     3,     4,     5,     6,     7,     8,     9,
    10,    11,    12,    13,    14,    16,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 37, :_reduce_1,
  1, 37, :_reduce_2,
  1, 38, :_reduce_3,
  3, 38, :_reduce_4,
  2, 38, :_reduce_5,
  1, 38, :_reduce_6,
  1, 39, :_reduce_none,
  1, 39, :_reduce_none,
  1, 39, :_reduce_none,
  1, 39, :_reduce_none,
  1, 39, :_reduce_none,
  1, 39, :_reduce_none,
  1, 39, :_reduce_none,
  1, 39, :_reduce_none,
  1, 39, :_reduce_none,
  1, 39, :_reduce_none,
  3, 39, :_reduce_17,
  1, 39, :_reduce_none,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  1, 41, :_reduce_21,
  1, 41, :_reduce_22,
  1, 41, :_reduce_23,
  1, 41, :_reduce_24,
  1, 41, :_reduce_25,
  2, 42, :_reduce_26,
  4, 42, :_reduce_27,
  3, 42, :_reduce_28,
  2, 52, :_reduce_29,
  3, 52, :_reduce_30,
  1, 53, :_reduce_31,
  3, 53, :_reduce_32,
  3, 43, :_reduce_33,
  3, 43, :_reduce_34,
  3, 43, :_reduce_35,
  3, 43, :_reduce_36,
  3, 43, :_reduce_37,
  3, 43, :_reduce_38,
  3, 43, :_reduce_39,
  3, 43, :_reduce_40,
  3, 43, :_reduce_41,
  3, 43, :_reduce_42,
  3, 43, :_reduce_43,
  3, 43, :_reduce_44,
  1, 44, :_reduce_45,
  3, 45, :_reduce_46,
  1, 46, :_reduce_47,
  3, 47, :_reduce_48,
  3, 54, :_reduce_49,
  3, 48, :_reduce_50,
  6, 48, :_reduce_51,
  0, 55, :_reduce_52,
  1, 55, :_reduce_53,
  3, 55, :_reduce_54,
  3, 49, :_reduce_55,
  3, 51, :_reduce_56,
  3, 50, :_reduce_57,
  6, 50, :_reduce_58 ]

racc_reduce_n = 59

racc_shift_n = 96

racc_token_table = {
  false => 0,
  :error => 1,
  :IF => 2,
  :ELSE => 3,
  :WHILE => 4,
  :DEF => 5,
  :CLASS => 6,
  :NEWLINE => 7,
  :NUMBER => 8,
  :STRING => 9,
  :TRUE => 10,
  :FALSE => 11,
  :NIL => 12,
  :IDENTIFIER => 13,
  :CONSTANT => 14,
  :INDENT => 15,
  :DEDENT => 16,
  "." => 17,
  "!" => 18,
  "*" => 19,
  "/" => 20,
  "+" => 21,
  "-" => 22,
  ">" => 23,
  ">=" => 24,
  "<" => 25,
  "<=" => 26,
  "==" => 27,
  "!=" => 28,
  "&&" => 29,
  "||" => 30,
  "=" => 31,
  "," => 32,
  "(" => 33,
  ")" => 34,
  ";" => 35 }

racc_nt_base = 36

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IF",
  "ELSE",
  "WHILE",
  "DEF",
  "CLASS",
  "NEWLINE",
  "NUMBER",
  "STRING",
  "TRUE",
  "FALSE",
  "NIL",
  "IDENTIFIER",
  "CONSTANT",
  "INDENT",
  "DEDENT",
  "\".\"",
  "\"!\"",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "\">\"",
  "\">=\"",
  "\"<\"",
  "\"<=\"",
  "\"==\"",
  "\"!=\"",
  "\"&&\"",
  "\"||\"",
  "\"=\"",
  "\",\"",
  "\"(\"",
  "\")\"",
  "\";\"",
  "$start",
  "Program",
  "Expressions",
  "Expression",
  "Terminator",
  "Literal",
  "Call",
  "Operator",
  "GetConstant",
  "SetConstant",
  "GetLocal",
  "SetLocal",
  "Def",
  "Class",
  "If",
  "While",
  "Arguments",
  "ArgList",
  "Block",
  "ParamList" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 31)
  def _reduce_1(val, _values, result)
     result = Nodes.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 32)
  def _reduce_2(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 36)
  def _reduce_3(val, _values, result)
     result = Nodes.new(val) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 37)
  def _reduce_4(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 38)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 39)
  def _reduce_6(val, _values, result)
     result = Nodes.new([]) 
    result
  end
.,.,

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

module_eval(<<'.,.,', 'grammar.y', 53)
  def _reduce_17(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

module_eval(<<'.,.,', 'grammar.y', 63)
  def _reduce_21(val, _values, result)
     result = NumberNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 64)
  def _reduce_22(val, _values, result)
     result = StringNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 65)
  def _reduce_23(val, _values, result)
     result = TrueNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 66)
  def _reduce_24(val, _values, result)
     result = FalseNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 67)
  def _reduce_25(val, _values, result)
     result = NilNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 71)
  def _reduce_26(val, _values, result)
     result = CallNode.new(nil, val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 73)
  def _reduce_27(val, _values, result)
     result = CallNode.new(val[0], val[2], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 74)
  def _reduce_28(val, _values, result)
     result = CallNode.new(val[0], val[2], []) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 78)
  def _reduce_29(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 79)
  def _reduce_30(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 83)
  def _reduce_31(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 84)
  def _reduce_32(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 88)
  def _reduce_33(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 89)
  def _reduce_34(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 90)
  def _reduce_35(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 91)
  def _reduce_36(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 92)
  def _reduce_37(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 93)
  def _reduce_38(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 94)
  def _reduce_39(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 95)
  def _reduce_40(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 96)
  def _reduce_41(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 97)
  def _reduce_42(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 98)
  def _reduce_43(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 99)
  def _reduce_44(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 103)
  def _reduce_45(val, _values, result)
     result = GetConstantNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 107)
  def _reduce_46(val, _values, result)
     result = SetConstantNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 111)
  def _reduce_47(val, _values, result)
     result = GetLocalNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 115)
  def _reduce_48(val, _values, result)
     result = SetLocalNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 119)
  def _reduce_49(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 123)
  def _reduce_50(val, _values, result)
     result = DefNode.new(val[1], [], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 125)
  def _reduce_51(val, _values, result)
     result = DefNode.new(val[1], val[3], val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 129)
  def _reduce_52(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 130)
  def _reduce_53(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 131)
  def _reduce_54(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 135)
  def _reduce_55(val, _values, result)
     result = ClassNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 139)
  def _reduce_56(val, _values, result)
     result = WhileNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 143)
  def _reduce_57(val, _values, result)
     result = IfNode.new(val[1], val[2], []) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 144)
  def _reduce_58(val, _values, result)
     result = IfNode.new(val[1], val[2], val[5]) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser
